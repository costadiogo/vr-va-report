import streamlit as st
import src.agent as agent
import os
import sqlite3
import pandas as pd

from datetime import datetime

DB_PATH = "database.db"

def formatted_monetary_values(valor: float) -> str:
    """
    Formata um n√∫mero float para uma string no formato de moeda brasileira (R$ 1.234,56).
    """
    us_formatted_value = f"{valor:,.2f}"
    br_formatted_value = us_formatted_value.replace(",", "TEMP").replace(".", ",")
    br_formatted_value = br_formatted_value.replace("TEMP", ".")
    
    return f"R$ {br_formatted_value}"

st.set_page_config(
    page_title="Agente VR/VA",
    page_icon="üçΩÔ∏è",
    layout="wide"
)

st.title("üçΩÔ∏è Agente Inteligente VR/VA")

with st.sidebar:
    st.image("src/img/Logo_I2A2.png", width=200)
    st.header("‚ÑπÔ∏è Informa√ß√µes")
    st.info("""
    **Como usar:**
    1. Insira sua API Key da OpenAI
    2. Fa√ßa upload das planilhas (.xlsx)
    3. Informe a compet√™ncia
    4. Clique em "Gerar Relat√≥rio"
    """)
        

col1, col2 = st.columns([2, 1])

with col1:
    api_key = st.text_input("üîë API Key OpenAI", type="password", help="Sua chave de API da OpenAI")

with col2:
    competencia = st.text_input(
        "üìÖ Compet√™ncia", 
        value=datetime.now().strftime("%m-%Y"),
        placeholder="ex: 05-2025"
    )

st.subheader("üìÅ Upload de Arquivos")
files = st.file_uploader(
    "Selecione as planilhas (.xlsx)",
    type=["xlsx"],
    accept_multiple_files=True,
    help="Fa√ßa upload das planilhas contendo os dados dos funcion√°rios"
)

if files:
    st.success(f"‚úÖ {len(files)} arquivo(s) carregado(s)")
    with st.expander("üìã Ver arquivos carregados"):
        for i, file in enumerate(files, 1):
            file_type = "üîç Detectando tipo..."
            if 'ativo' in file.name.lower():
                file_type = "Funcion√°rios Ativos"
            elif 'admiss' in file.name.lower():
                file_type = "Admiss√µes"
            elif 'deslig' in file.name.lower():
                file_type = "Desligamentos"
            elif 'rias' in file.name.lower():
                file_type = "F√©rias"
            elif 'ext' in file.name.lower():
                file_type = "Exterior"
            elif 'est' in file.name.lower():
                file_type = "Est√°gio"
            elif 'sindicato' in file.name.lower():
                file_type = "Base sindicato x valor"
            elif 'dias' in file.name.lower():
                file_type = "Base dias uteis"
            elif 'afas' in file.name.lower():
                file_type = "Afastamento"
            elif 'apr' in file.name.lower():
                file_type = "Aprendiz"  
            
            st.write(f"{i}. {file.name} ({file.size} bytes) - {file_type}")

# Valida√ß√µes visuais
st.subheader("üîç Status das Configura√ß√µes")
col3, col4, col5 = st.columns(3)

with col3:
    if api_key:
        st.success("‚úÖ API Key fornecida")
    else:
        st.error("‚ùå API Key necess√°ria")

with col4:
    if files:
        if len(files) <= 10:
            st.success(f"‚úÖ {len(files)} arquivo(s) v√°lido(s)")
        else:
            st.error(f"‚ùå Muitos arquivos ({len(files)}/10)")
    else:
        st.warning("‚ö†Ô∏è Nenhum arquivo carregado")

with col5:
    if competencia:
        st.success("‚úÖ Compet√™ncia definida")
    else:
        st.warning("‚ö†Ô∏è Compet√™ncia n√£o definida")

# Bot√£o principal
st.markdown("---")

if st.button("üöÄ Gerar Relat√≥rio", type="primary", use_container_width=True):
    # Valida√ß√µes
    if not api_key:
        st.error("‚ùå Informe a API Key da OpenAI!")
    elif not files:
        st.error("‚ùå Fa√ßa upload dos arquivos!")
    elif len(files) > 10:
        st.error(f"‚ùå Voc√™ s√≥ pode enviar at√© 10 arquivos. Voc√™ enviou {len(files)}.")
    elif not competencia:
        st.error("‚ùå Informe a compet√™ncia!")
    else:
        progress_container = st.container()
        
        with progress_container:
            progress_bar = st.progress(0, text="üîÑ Iniciando...")
            
            try:
                progress_bar.progress(10, text="ü§ñ Inicializando agente VR/VA...")
                
                if not os.path.exists(DB_PATH):
                    open(DB_PATH, 'a').close()
                
                agente_vrva = agent.VRVAAgent(DB_PATH, api_key)
                
                progress_bar.progress(20, text="üìÅ Preparando arquivos para processamento...")

                agente_vrva.set_files(files)

                workflow_status = st.empty()
                
                progress_bar.progress(30, text="üîÑ Executando workflow LangGraph...")

                initial_state = {
                    'messages': [],
                    'db_path': DB_PATH,
                    'files': files,
                    'competencia': competencia,
                    'current_step': "Iniciando",
                    'processed_files': {},
                    'calculations_done': False,
                    'report_generated': False,
                    'error': ""
                }

                workflow_steps = [
                    ("process_actives", "üë• Processando funcion√°rios ativos", 40),
                    ("process_admissions", "üìÖ Processando admiss√µes", 50),
                    ("process_fired", "üì§ Processando desligamentos", 60),
                    ("process_business_days", "üóìÔ∏è Calculando dias √∫teis", 70),
                    ("process_daily_values", "üí∞ Calculando valores di√°rios", 80),
                    ("calculate_benefits", "üßÆ Calculando benef√≠cios VR/VA", 90),
                    ("generate_report", "üìä Gerando relat√≥rio final", 95)
                ]
                
                final_state = agente_vrva.workflow.invoke(initial_state)
                
                for step_name, step_desc, progress_val in workflow_steps:
                    progress_bar.progress(progress_val, text=step_desc)
                    workflow_status.info(f"‚úÖ {step_desc}")
                    
                progress_bar.progress(100, text="‚úÖ Processo finalizado!")
 
                if final_state.get('error'):
                    st.error(f"‚ùå **Erro no workflow:** {final_state['error']}")
                    
                    with st.expander("üîç Detalhes do erro"):
                        st.code(final_state['error'])
                        st.write("**Estado final do workflow:**")
                        st.json(final_state)
                
                elif final_state.get('report_generated'):
                    st.success("üéâ **Relat√≥rio gerado com sucesso!**")
                    
                    nome_arquivo = f"VR MENSAL {competencia.replace('-', '.')}.xlsx"
                    
                    with st.expander("üìä Detalhes do Processamento"):
                        st.write("**Arquivos processados:**")
                        for file_type, processed in final_state.get('processed_files', {}).items():
                            status = "‚úÖ" if processed else "‚ùå"
                            st.write(f"{status} {file_type.title()}")
                        
                        st.write(f"**√öltimo step:** {final_state.get('current_step', 'N/A')}")
                        st.write(f"**C√°lculos realizados:** {'‚úÖ Sim' if final_state.get('calculations_done') else '‚ùå N√£o'}")

                    if os.path.exists(nome_arquivo):
                        tamanho = os.path.getsize(nome_arquivo) / 1024  # KB
                        
                        st.info(f"""
                            üìã **Detalhes do Relat√≥rio VR/VA:**
                            - **Arquivo:** {nome_arquivo}
                            - **Tamanho:** {tamanho:.1f} KB
                            - **Compet√™ncia:** {competencia}
                            - **C√°lculos:** IA Generativa (GPT-4)
                            - **Gerado em:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}

                            ü§ñ **C√°lculos realizados pelo Agente:**
                            - Total VR/VA = Dias √∫teis √ó Valor di√°rio
                            - Custo empresa = 80% do total
                            - Desconto funcion√°rio = 20% do total
                            """
                        )
                        
                        # Bot√£o de download
                        with open(nome_arquivo, "rb") as file:
                            st.download_button(
                                label="üì• Baixar Relat√≥rio VR/VA",
                                data=file.read(),
                                file_name=nome_arquivo,
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                use_container_width=True
                            )
                    else:
                        st.warning("‚ö†Ô∏è Arquivo n√£o encontrado ap√≥s gera√ß√£o")
                        
                        # Verificar outros arquivos Excel no diret√≥rio
                        arquivos_excel = [f for f in os.listdir('.') if f.endswith('.xlsx')]
                        if arquivos_excel:
                            st.info("üìÅ Arquivos Excel encontrados no diret√≥rio:")
                            for arquivo in arquivos_excel:
                                if 'relatorio' in arquivo.lower():
                                    with open(arquivo, "rb") as file:
                                        st.download_button(
                                            label=f"üì• Baixar {arquivo}",
                                            data=file.read(),
                                            file_name=arquivo,
                                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                            use_container_width=True
                                        )
                else:
                    st.error("‚ùå Falha ao gerar o relat√≥rio")
                    st.error("O workflow n√£o foi conclu√≠do com sucesso")
                    
                    with st.expander("üîç Debug - Estado do workflow"):
                        st.json(final_state)
                
                # Mostrar estat√≠sticas finais
                with st.expander("üìä Estat√≠sticas do Processamento"):
                    # Verificar dados na tabela report
                    try:
                        with sqlite3.connect(DB_PATH) as conn:
                            # Verificar se tabela report existe
                            cursor = conn.cursor()
                            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='report'")
                            if cursor.fetchone():
                                df_stats = pd.read_sql("SELECT COUNT(*) as total_registros FROM report", conn)
                                st.metric("Total de Registros Processados", df_stats['total_registros'].iloc[0])
                                
                                # Estat√≠sticas por estado se existir coluna
                                try:
                                    df_estados = pd.read_sql("""
                                        SELECT ESTADO, COUNT(*) as quantidade 
                                        FROM report 
                                        WHERE ESTADO IS NOT NULL 
                                        GROUP BY ESTADO
                                    """, conn)
                                    if not df_estados.empty:
                                        st.subheader("üìç Distribui√ß√£o por Estado:")
                                        for _, row in df_estados.iterrows():
                                            st.write(f"‚Ä¢ {row['ESTADO']}: {row['quantidade']} funcion√°rios")
                                except Exception:
                                    pass
                                
                                # Totais financeiros se existirem                                
                                try:
                                    df_totais = pd.read_sql("""
                                        SELECT 
                                            SUM(TOTAL) as total,
                                            SUM(CUSTO_EMPRESA) as custo_empresa,
                                            SUM(CUSTO_PROFISSIONAL) as custo_profissionais
                                        FROM report 
                                        WHERE TOTAL IS NOT NULL
                                    """, conn)
                                    
                                    if not df_totais.empty and df_totais['total'].iloc[0]:
                                        st.subheader("üí∞ Totais Financeiros:")
                                        col_t1, col_t2, col_t3 = st.columns(3)
                                        with col_t1:
                                            total = df_totais['total'].iloc[0] or 0
                                            st.metric("Total VR/VA", formatted_monetary_values(total))
                                        with col_t2:
                                            total_company_cost = df_totais['custo_empresa'].iloc[0] or 0
                                            st.metric("Custo Empresa", formatted_monetary_values(total_company_cost))
                                        with col_t3:
                                            employee_cost = df_totais['custo_profissionais'].iloc[0] or 0
                                            emp_cost = formatted_monetary_values(employee_cost)
                                            st.metric("Desconto Profissional", emp_cost)
                                except Exception:
                                    pass
                            else:
                                st.warning("Tabela 'report' n√£o encontrada no banco")
                    except Exception as e:
                        st.error(f"Erro ao obter estat√≠sticas: {e}")
                
            except Exception as e:
                progress_bar.progress(0, text="‚ùå Erro durante processamento")
                st.error(f"‚ùå **Erro durante o processamento:** {str(e)}")
                
                # Mostrar detalhes do erro
                with st.expander("üêõ Detalhes t√©cnicos do erro"):
                    st.code(str(e))
                    
                    # Informa√ß√µes adicionais para debug
                    st.write("**Informa√ß√µes para debug:**")
                    st.write(f"- Banco existe: {os.path.exists(DB_PATH)}")
                    st.write(f"- N√∫mero de arquivos: {len(files) if files else 0}")
                    st.write(f"- API Key fornecida: {'Sim' if api_key else 'N√£o'}")
                    
                    # Tentar mostrar tabelas existentes
                    try:
                        with sqlite3.connect(DB_PATH) as conn:
                            cursor = conn.cursor()
                            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                            tabelas = [row[0] for row in cursor.fetchall()]
                            st.write(f"- Tabelas no banco: {tabelas}")
                    except Exception:
                        st.write("- N√£o foi poss√≠vel verificar tabelas do banco")
                
                st.info("üí° **Dicas para resolver:**")
                st.write("1. Verifique se a API Key da OpenAI est√° correta")
                st.write("2. Confirme se os arquivos t√™m as colunas esperadas")
                st.write("3. Verifique se h√° conex√£o com internet")
                st.write("4. Consulte os logs no terminal para mais detalhes")
                st.write("5. Certifique-se de que os arquivos cont√™m dados v√°lidos")

# Footer expandido
st.markdown("---")
st.markdown(
    """
    <div style='text-align: left; color: #666; font-size: 12px;'>
    ü§ñ <strong>AI-Powered:</strong> OpenAI GPT-4 para c√°lculos inteligentes<br/>
    üîÑ <strong>Workflow:</strong> LangGraph para orquestra√ß√£o estruturada<br/>
    üìä <strong>ETL:</strong> Pandas + SQLite para processamento de dados<br/>
    üíª <strong>Interface:</strong> Streamlit para experi√™ncia interativa<br/>
    </div>
    """,
    unsafe_allow_html=True
)
   